domain Ptr32 {
    function offset(Ref, Int): Ptr32
    function next(Ptr32): Ptr32
    function address(Ptr32): Int

    function offset_inj(Ptr32, Ref): Int

    axiom next_offset {
        forall r: Ref, i: Int :: { next(offset(r, i)) } next(offset(r, i)) == offset(r, i + 1)
    }
    axiom inj {
        forall r: Ref, i: Int :: { offset(r, i) } offset_inj(offset(r, i), r) == i
    }
    axiom addr {
        forall r: Ref, i: Int :: { address(offset(r, i)) } address(next(offset(r, i))) == address(offset(r, i)) + 4
    }
}

field seq: Seq[Int]

method check_aligned(x: Ref)
    requires acc(x.seq)
    ensures acc(x.seq)
    ensures |x.seq| == |old(x.seq)| + 1
{
    var idx_zero: Ptr32 := offset(x, 0)
    var idx_one: Ptr32 := next(idx_zero)

    assert idx_zero != idx_one
    x.seq := x.seq ++ Seq(0)

    define aligned(p) (address(p) % 4 == 0)
    if (aligned(idx_zero)) {
        assert address(idx_one) % 2 == 0

        if (!aligned(idx_one)) {
            x.seq := x.seq ++ Seq(1)
        }
    }
}
